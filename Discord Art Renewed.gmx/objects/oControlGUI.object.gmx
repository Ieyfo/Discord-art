<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mainSurface = noone;
colSelectSurface = noone;
framesSurface = noone;
editSurface = noone;
colSelectOpen = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(mainSurface)){
    surface_free(mainSurface);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw UI / Button funtions.


if(surface_exists(mainSurface)){
    surface_set_target(mainSurface);
    draw_clear_alpha(global.bgCol, 1);
    // Draw top UI bar/ Icons.
    draw_set_alpha(0.7);
    draw_rectangle_color(0,0,1280,42,c_black,c_black,c_black,c_black,false);
    draw_set_alpha(1);
    draw_rectangle_colour(0,0,1280,39,global.bgCol2, global.bgCol2, global.bgCol2, global.bgCol2, false);
    draw_sprite(sUIList,0, 2, 2);
    draw_sprite(sUINewGrid,0, 38, 2);
    draw_sprite(sUIImport,0, 74, 2);
    draw_sprite(sUIExport,0, 109, 2);
    draw_sprite(sPlus, 0, 145, 2);
    draw_sprite(sUISettings,0, 1175, 2);
    draw_sprite(sUIInfo,0, 1210, 2);
    draw_sprite(sUIExit,0, 1245, 2);
    draw_set_colour(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_font(fTitle);
    draw_text(room_width/2,21,"Emoji Art Editor");
    draw_set_font(noone);
    draw_set_colour(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_left);
    
    // Clicking UI button.
    if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y,1175,2,1209,37)){
        // Setting.
        show_debug_message("Clicked UI Element: Settings");
    }else if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y,1210,2,1244,37)){
        // Info.
        show_debug_message("Clicked UI Element: Info");
    }else if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y,1245,2,1280,37)){
        // Exit.
        show_debug_message("Clicked UI Element: Exit");
        game_end();
    }
    
    // Draw the frames section of the UI.
    if(surface_exists(framesSurface)){
        surface_set_target(framesSurface);
        draw_set_alpha(0.7);
        draw_rectangle_color(0,0,1280,4,c_black,c_black,c_black,c_black,false);
        draw_set_alpha(1);
        draw_rectangle_color(0,3,1280,218,global.bgCol2,global.bgCol2,global.bgCol2,global.bgCol2,false);
        draw_set_colour(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_set_font(fUI);
        draw_text(room_width/2,15,"Frames");
        draw_set_font(noone);
        draw_set_colour(c_black);
        draw_set_halign(fa_left);
        draw_set_valign(fa_left);
        
        surface_reset_target();
        draw_surface(framesSurface, 0, 502);
    }else{
        framesSurface = surface_create(1280,218);
        surface_set_target(framesSurface);
        surface_reset_target();
    }
    
    surface_reset_target();
    draw_surface(mainSurface, 0, 0);
}else{
    mainSurface = surface_create(1280,720);
    surface_set_target(mainSurface);
    draw_clear_alpha(global.bgCol, 1);
    surface_reset_target();
}

// Clicking Color Select button.
if(surface_exists(colSelectSurface)){
    if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y,2,2,37,37) &amp;&amp; colSelectOpen = false){
        // Color Select.
        surface_set_target(colSelectSurface);
        draw_set_alpha(0.7);
        draw_rectangle_color(0,6,59,464,c_black,c_black,c_black,c_black,false);
        draw_set_alpha(1);
        draw_rectangle_color(0,0,56,720,global.bgCol2,global.bgCol2,global.bgCol2,global.bgCol2,false);
        
        // Draw All Colors in the select area.
        for(i=0;i&lt;16;i++){
            draw_rectangle_colour(8, (i*40)+8,48,(i*40)+48, global.color[i], global.color[i], global.color[i], global.color[i], false);
        }
        surface_reset_target();
        colSelectOpen = true;
        show_debug_message("Clicked UI Element: Color Select Open");
    }else if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y,2,2,37,37) &amp;&amp; colSelectOpen = true){
        surface_set_target(colSelectSurface);
        draw_clear_alpha(global.bgCol2, 0);
        colSelectOpen = false;
        show_debug_message("Clicked UI Element: Color Select Closed");
        surface_reset_target();
    }
    draw_surface(colSelectSurface,0, 37);
}else{
    colSelectSurface = surface_create(64,683);
    surface_set_target(colSelectSurface);
    surface_reset_target();
}

// Clicking New Grid button.
if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y,38,2,73,37)){
    show_debug_message("Clicked UI Element: New Grid");
}

// Import/Export Buttons.
if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y,74,2,108,37)){
    show_debug_message("Clicked UI Element: Import");
}else if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y,109,2,144,37)){
    show_debug_message("Clicked UI Element: Export");
}

// New Frame.
if(mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y, 145, 2, 179, 37)){
    show_debug_message("Clicked UI Element: Add Frame");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
